[{"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\index.tsx":"1","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\reportWebVitals.ts":"2","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\App.tsx":"3","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\application.tsx":"4","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\config\\logging.ts":"5","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\config\\routes.ts":"6","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\pages\\environment.tsx":"7","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\pages\\home.tsx":"8","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\pages\\accelerometer.tsx":"9","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\components\\Header\\Header.tsx":"10","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\components\\Footer\\Footer.tsx":"11","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\pages\\demonstrator.tsx":"12","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\components\\contactForm\\contactForm.tsx":"13","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\index.tsx":"14","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\reportWebVitals.ts":"15","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\App.tsx":"16","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\application.tsx":"17","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\components\\Footer\\Footer.tsx":"18","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\components\\contactForm\\contactForm.tsx":"19","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\components\\Header\\Header.tsx":"20","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\config\\routes.ts":"21","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\config\\logging.ts":"22","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\home.tsx":"23","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\aboutMe.tsx":"24","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\skills.tsx":"25","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\contact.tsx":"26","C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\projects.tsx":"27","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\index.tsx":"28","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\reportWebVitals.ts":"29","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\App.tsx":"30","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\application.tsx":"31","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\components\\Footer\\Footer.tsx":"32","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\components\\Header\\Header.tsx":"33","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\components\\contactForm\\contactForm.tsx":"34","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\config\\logging.ts":"35","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\config\\routes.ts":"36","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\skills.tsx":"37","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\home.tsx":"38","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\contact.tsx":"39","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\aboutMe.tsx":"40","C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\projects.tsx":"41"},{"size":298,"mtime":1646387313607,"results":"42","hashOfConfig":"43"},{"size":440,"mtime":1646387313611,"results":"44","hashOfConfig":"43"},{"size":440,"mtime":1646387313585,"results":"45","hashOfConfig":"43"},{"size":1318,"mtime":1646387313585,"results":"46","hashOfConfig":"43"},{"size":1188,"mtime":1646387313588,"results":"47","hashOfConfig":"43"},{"size":837,"mtime":1646387313588,"results":"48","hashOfConfig":"43"},{"size":12873,"mtime":1646395375141,"results":"49","hashOfConfig":"43"},{"size":910,"mtime":1646389266176,"results":"50","hashOfConfig":"43"},{"size":16688,"mtime":1646395315446,"results":"51","hashOfConfig":"43"},{"size":2808,"mtime":1646399405469,"results":"52","hashOfConfig":"43"},{"size":672,"mtime":1646387313586,"results":"53","hashOfConfig":"43"},{"size":1400,"mtime":1646389550431,"results":"54","hashOfConfig":"43"},{"size":1864,"mtime":1646387313587,"results":"55","hashOfConfig":"43"},{"size":298,"mtime":1646387313607,"results":"56","hashOfConfig":"57"},{"size":440,"mtime":1646387313611,"results":"58","hashOfConfig":"57"},{"size":445,"mtime":1646432579175,"results":"59","hashOfConfig":"57"},{"size":1318,"mtime":1646387313585,"results":"60","hashOfConfig":"57"},{"size":693,"mtime":1646425990434,"results":"61","hashOfConfig":"57"},{"size":1864,"mtime":1646483703307,"results":"62","hashOfConfig":"57"},{"size":1927,"mtime":1646499393887,"results":"63","hashOfConfig":"57"},{"size":906,"mtime":1646499312383,"results":"64","hashOfConfig":"57"},{"size":1188,"mtime":1646387313588,"results":"65","hashOfConfig":"57"},{"size":2261,"mtime":1646499369058,"results":"66","hashOfConfig":"57"},{"size":1816,"mtime":1646494289483,"results":"67","hashOfConfig":"57"},{"size":2968,"mtime":1646498605060,"results":"68","hashOfConfig":"57"},{"size":1005,"mtime":1646500764785,"results":"69","hashOfConfig":"57"},{"size":531,"mtime":1646484191409,"results":"70","hashOfConfig":"57"},{"size":298,"mtime":1646676879632,"results":"71","hashOfConfig":"72"},{"size":440,"mtime":1646676879634,"results":"73","hashOfConfig":"72"},{"size":445,"mtime":1646676879627,"results":"74","hashOfConfig":"72"},{"size":1318,"mtime":1646676879627,"results":"75","hashOfConfig":"72"},{"size":693,"mtime":1646676879628,"results":"76","hashOfConfig":"72"},{"size":1927,"mtime":1646676879628,"results":"77","hashOfConfig":"72"},{"size":1864,"mtime":1646676879629,"results":"78","hashOfConfig":"72"},{"size":1188,"mtime":1646676879630,"results":"79","hashOfConfig":"72"},{"size":906,"mtime":1646676879630,"results":"80","hashOfConfig":"72"},{"size":2968,"mtime":1646676879634,"results":"81","hashOfConfig":"72"},{"size":2261,"mtime":1646676879633,"results":"82","hashOfConfig":"72"},{"size":1005,"mtime":1646676879633,"results":"83","hashOfConfig":"72"},{"size":1816,"mtime":1646676879633,"results":"84","hashOfConfig":"72"},{"size":531,"mtime":1646676879634,"results":"85","hashOfConfig":"72"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"y5b1v8",{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"10zsok3",{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gbah93",{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\index.tsx",[],["172","173"],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\reportWebVitals.ts",[],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\App.tsx",[],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\application.tsx",[],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\config\\logging.ts",[],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\config\\routes.ts",[],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\pages\\environment.tsx",["174","175","176"],"import React, { useEffect} from 'react';\r\nimport IPage from '../interfaces/page';\r\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { Button, Slider, TextField } from '@material-ui/core';\r\nimport { createTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport Line from 'react-chartjs-2';\r\nimport '../App.css';\r\n\r\n//Hello World\r\n\r\nconst EnvironmentPage: React.FunctionComponent<IPage & RouteComponentProps<any>> = props => {\r\n\r\n    interface EnvironmentBeaconData {\r\n        Temperature?: number,\r\n        Pressure?: number,\r\n        Humidity?: number,\r\n        BeaconId?: string,\r\n        Timestamp?: string,\r\n        Latitude?: number,\r\n        Longitude?: number,\r\n      }\r\n    \r\n      const muiTheme = createTheme({\r\n        overrides:{\r\n          MuiSlider: {\r\n            thumb:{\r\n            color: \"orange\",\r\n            },\r\n            track: {\r\n              color: 'green'\r\n            },\r\n            rail: {\r\n              color: 'white'\r\n            }\r\n          }\r\n      }\r\n      });\r\n    \r\n      const [data, setData] = React.useState<EnvironmentBeaconData>({\r\n        Temperature: 19,\r\n        Pressure: 930,\r\n        Humidity: 48,\r\n        BeaconId: \"\",\r\n        Timestamp: \"\",\r\n        Latitude: 0,\r\n        Longitude: 0,\r\n        \r\n      });\r\n\r\n      const [temp, setTemp] = React.useState<number[]>();\r\n      const [pre, setPre] = React.useState<number[]>();\r\n      const [hum, setHum] = React.useState<number[]>();\r\n      const [time, setTime] = React.useState<string[]>();\r\n      const [lat, setLat] = React.useState<number[]>();\r\n      const [long, setLong] = React.useState<number[]>();\r\n    \r\n      let i = 50;\r\n      let Temp:number[] = [];\r\n      let Pre:number[] = [];\r\n      let Hum:number[] = [];\r\n      let Tim:string[] = [];\r\n      var Lat:number[] = [];\r\n      var Long:number[] = [];\r\n      \r\n      const [minThresholdValueT, setMinThresholdValueT] = React.useState<number>(0)\r\n      const [maxThresholdValueT, setMaxThresholdValueT] = React.useState<number>(0)\r\n\r\n      const [minThresholdValueP, setMinThresholdValueP] = React.useState<number>(0)\r\n      const [maxThresholdValueP, setMaxThresholdValueP] = React.useState<number>(0)\r\n\r\n      const [minThresholdValueH, setMinThresholdValueH] = React.useState<number>(0)\r\n      const [maxThresholdValueH, setMaxThresholdValueH] = React.useState<number>(0)\r\n\r\n      useEffect(() => {\r\n        createWebsocketConnection();\r\n      }, []);\r\n    \r\n      const createWebsocketConnection = (): void => {\r\n    \r\n        const beacon = 'wss://pmsekisqr4.execute-api.eu-central-1.amazonaws.com/dev'; \r\n    \r\n        const socket = new WebSocket(beacon);\r\n        // sends payload to get connectionId\r\n        socket.onopen = () => {\r\n          let payload = {\r\n            action: '$connect',\r\n          };\r\n          socket.send(JSON.stringify(payload));\r\n          console.log('Connection established');\r\n        };\r\n\r\n        // receives message from websocket (for connectionId)\r\n        let environmentBeaconData: any = socket.onmessage = (event: any) => {\r\n          if (!event) {\r\n            return;\r\n          }\r\n    \r\n          let data = JSON.parse(event.data);\r\n    \r\n          if (data.EnvironmentBeaconData) {\r\n            setData(data.EnvironmentBeaconData);\r\n\r\n            if (i >= 50) {\r\n              \r\n              Tim.push(data.EnvironmentBeaconData.Timestamp);\r\n              setTime(Tim);\r\n              Hum.push(data.EnvironmentBeaconData.Humidity);\r\n              setHum(Hum);\r\n              Pre.push(data.EnvironmentBeaconData.Pressure);\r\n              setPre(Pre);\r\n              Temp.push(data.EnvironmentBeaconData.Temperature);\r\n              setTemp(Temp);\r\n              Lat.push(data.AccelerometerBeaconData.Latitude);\r\n              setLat(Lat);\r\n              Long.push(data.AccelerometerBeaconData.Longitude);\r\n              setLong(Long);\r\n\r\n              i = 0;\r\n            }\r\n            i++;\r\n          }\r\n        }\r\n        return environmentBeaconData\r\n      };\r\n\r\n      const setMinThresholdT = (newMinValue: string) => {\r\n        if(typeof parseFloat(newMinValue) !== 'number') { return; }\r\n\r\n        setMinThresholdValueT(parseFloat(newMinValue));\r\n      }\r\n\r\n      const setMaxThresholdT = (newMaxValue: string) => {\r\n        if(typeof parseFloat(newMaxValue) !== 'number') { return; }\r\n\r\n        setMaxThresholdValueT(parseFloat(newMaxValue));\r\n      }\r\n\r\n      const setMinThresholdP = (newMinValue: string) => {\r\n        if(typeof parseFloat(newMinValue) !== 'number') { return; }\r\n\r\n        setMinThresholdValueP(parseFloat(newMinValue));\r\n      }\r\n\r\n      const setMaxThresholdP = (newMaxValue: string) => {\r\n        if(typeof parseFloat(newMaxValue) !== 'number') { return; }\r\n\r\n        setMaxThresholdValueP(parseFloat(newMaxValue));\r\n      }\r\n\r\n      const setMinThresholdH = (newMinValue: string) => {\r\n        if(typeof parseFloat(newMinValue) !== 'number') { return; }\r\n\r\n        setMinThresholdValueH(parseFloat(newMinValue));\r\n      }\r\n\r\n      const setMaxThresholdH = (newMaxValue: string) => {\r\n        if(typeof parseFloat(newMaxValue) !== 'number') { return; }\r\n\r\n        setMaxThresholdValueH(parseFloat(newMaxValue));\r\n      }\r\n\r\n    return (\r\n        <div>\r\n          <br/>\r\n          <Button style={{ background: '#4db8ff', padding:'15px'}} fullWidth variant=\"contained\" color=\"primary\" > Environment Beacon </Button>\r\n            <h2>BeaconId: {data.BeaconId}</h2>\r\n            <div className=\"row\">\r\n              <div className=\"column\">\r\n                <ThemeProvider theme={muiTheme}>\r\n                <div className=\"slider-heading\">Temperature</div>\r\n                  <Slider style={{ width: 300 }}  min={-40} max={40} step={10} value={data.Temperature} marks valueLabelDisplay=\"auto\"/>\r\n                  </ThemeProvider>\r\n              </div>\r\n              <div className=\"column\">\r\n              <div className=\"slider-heading\">Pressure</div>\r\n                <Slider style={{ width: 300 }} min={900} max={1000} step={10} value={data.Pressure} marks valueLabelDisplay=\"auto\"/>\r\n              </div>\r\n              <div className=\"column\">\r\n              <div className=\"slider-heading\">Humidity</div>\r\n                <Slider style={{ width: 300 }} min={20} max={80} step={10} value={data.Humidity} marks valueLabelDisplay=\"auto\"/>\r\n              </div>\r\n            </div>\r\n            \r\n            <div>\r\n              <div className=\"slider-heading\"> Temperature in °C </div>\r\n              <div className=\"slider-heading\"> Select Threshold Limits </div>\r\n              <TextField id=\"minThreshold\"  type = \"number\" label=\"Min\" variant=\"outlined\" value={minThresholdValueT}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMinThresholdT(e.target.value)}\r\n              />\r\n              <TextField id=\"maxThreshold\"  type = \"number\" label=\"Max\" variant=\"outlined\" value={maxThresholdValueT}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMaxThresholdT(e.target.value)}\r\n              />\r\n              \r\n              <Line className=\"slider-heading\"\r\n            data={{\r\n              labels: time,\r\n              datasets: [{\r\n                label: '',\r\n                data: temp,\r\n                fill: true,\r\n                borderColor: 'rgb(255, 255, 255)',\r\n                backgroundColor: 'rgb(72, 81, 86)',\r\n                showLine: true,\r\n                tension: 0.1\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Min',\r\n                data: [minThresholdValueT, minThresholdValueT, minThresholdValueT, minThresholdValueT, minThresholdValueT, minThresholdValueT, minThresholdValueT, minThresholdValueT],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Max',\r\n                data: [maxThresholdValueT, maxThresholdValueT, maxThresholdValueT, maxThresholdValueT, maxThresholdValueT, maxThresholdValueT, maxThresholdValueT, maxThresholdValueT],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              }\r\n              ],\r\n            }}\r\n            height={200}\r\n            width={600} type={'line'}              />\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"slider-heading\"> Pressure in hpa </div>\r\n              <div className=\"slider-heading\"> Select Threshold Limits </div>\r\n              <TextField id=\"minThreshold\"  type = \"number\" label=\"Min\" variant=\"outlined\" value={minThresholdValueP}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMinThresholdP(e.target.value)}\r\n              />\r\n              <TextField id=\"maxThreshold\"  type = \"number\" label=\"Max\" variant=\"outlined\" value={maxThresholdValueP}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMaxThresholdP(e.target.value)}\r\n              />\r\n              <Line className=\"slider-heading\"\r\n            data={{\r\n              labels: time,\r\n              datasets: [{\r\n                label: '',\r\n                data: pre,\r\n                fill: true,\r\n                borderColor: 'rgb(255, 255, 255)',\r\n                backgroundColor: 'rgb(241, 136, 0)',\r\n                showLine: true,\r\n                tension: 0.1\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Min',\r\n                data: [minThresholdValueP, minThresholdValueP, minThresholdValueP, minThresholdValueP, minThresholdValueP, minThresholdValueP, minThresholdValueP, minThresholdValueP],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Max',\r\n                data: [maxThresholdValueP, maxThresholdValueP, maxThresholdValueP, maxThresholdValueP, maxThresholdValueP, maxThresholdValueP, maxThresholdValueP, maxThresholdValueP],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              }\r\n              ],\r\n            }}\r\n            height={200}\r\n            width={600} type={'line'}              />\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"slider-heading\"> Humidity in % </div>\r\n              <div className=\"slider-heading\"> Select Threshold Limits </div>\r\n              <TextField id=\"minThreshold\"  type = \"number\" label=\"Min\" variant=\"outlined\" value={minThresholdValueH}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMinThresholdH(e.target.value)}\r\n              />\r\n              <TextField id=\"maxThreshold\"  type = \"number\" label=\"Max\" variant=\"outlined\" value={maxThresholdValueH}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMaxThresholdH(e.target.value)}\r\n              />\r\n              <Line className=\"slider-heading\"\r\n            data={{\r\n              labels: time,\r\n              datasets: [{\r\n                label: '',\r\n                data: hum,\r\n                fill: true,\r\n                borderColor: 'rgb(255, 255, 255)',\r\n                backgroundColor: 'rgb(0, 135, 138)',\r\n                showLine: true,\r\n                tension: 0.1\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Min',\r\n                data: [minThresholdValueH, minThresholdValueH, minThresholdValueH, minThresholdValueH, minThresholdValueH, minThresholdValueH, minThresholdValueH, minThresholdValueH],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Max',\r\n                data: [maxThresholdValueH, maxThresholdValueH, maxThresholdValueH, maxThresholdValueH, maxThresholdValueH, maxThresholdValueH, maxThresholdValueH, maxThresholdValueH],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              }\r\n              ],\r\n            }}\r\n            height={200}\r\n            width={600} type={'line'}              />\r\n              {/* <div className=\"slider-heading\"> GPS Coordinates </div>\r\n              <Bar\r\n                data={{\r\n                  labels: time,\r\n                  datasets: [{\r\n                    label: '',\r\n                    data: lat,\r\n                    borderColor: 'rgb(255, 255, 255)',\r\n                    backgroundColor: 'rgb(241, 136, 0)',\r\n                    borderWidth: 2                 \r\n                  },\r\n                  {\r\n                    type: 'bar',\r\n                    data: long,\r\n                    backgroundColor: 'rgb(255,215,0)',\r\n                  }\r\n                ],\r\n                }}\r\n                height={200}\r\n                width={600}\r\n              /> */}\r\n            </div>\r\n\r\n            <Button style={{ background: '#008ae6' }} variant=\"contained\" color=\"primary\" component={Link} to=\"/\">Back</Button>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(EnvironmentPage);","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\pages\\home.tsx",[],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\pages\\accelerometer.tsx",["177","178","179","180","181","182","183","184"],"import React, { useEffect} from 'react';\r\nimport IPage from '../interfaces/page';\r\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport ReactSpeedometer from \"react-d3-speedometer\";\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport Line from 'react-chartjs-2';\r\nimport '../App.css';\r\nimport {MapContainer,TileLayer, Marker, Popup, AttributionControl, useMap, Circle } from 'react-leaflet';\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport * as L from 'leaflet';\r\nimport marker from '../images/map-pin.svg';\r\nimport { Icon} from 'leaflet';\r\n// import \"leaflet-draw/leaflet.draw.css\";\r\n// var leafletDraw = require('leaflet-draw');\r\n\r\n\r\nconst AccelerometerPage: React.FunctionComponent<IPage & RouteComponentProps<any>> = props => {\r\n\r\n  interface Coordinates {\r\n    lat: number;\r\n    long: number;\r\n  }\r\n\r\n    interface AccelerometerBeaconData {\r\n        AccelerationInX?: number,\r\n        AccelerationInY?: number,\r\n        AccelerationInZ?: number,\r\n        BeaconId1?: string,\r\n        Timestamp1?: string\r\n        Latitude?: number,\r\n        Longitude?: number,\r\n      }\r\n    \r\n      const [data, setData] = React.useState<AccelerometerBeaconData>({\r\n        AccelerationInX: 0,\r\n        AccelerationInY: 0,\r\n        AccelerationInZ: 0,\r\n        BeaconId1: \"\",\r\n        Timestamp1: \"\",\r\n        Latitude: 0,\r\n        Longitude: 0,\r\n      });\r\n\r\n    \r\n\r\n      const [aX, setAX] = React.useState<number[]>();\r\n      const [aY, setAY] = React.useState<number[]>();\r\n      const [aZ, setAZ] = React.useState<number[]>();\r\n      const [coords, setCoords] = React.useState<Coordinates[]>([]);\r\n      const [time, setTime] = React.useState<string[]>();\r\n\r\n     \r\n\r\n\r\n      var Ax:number[] = [];\r\n      var Ay:number[] = [];\r\n      var Az:number[] = [];\r\n      var Tim:string[] = [];\r\n\r\n      var i = 50\r\n\r\n      const [minThresholdValueAX, setMinThresholdValueAX] = React.useState<number>(0)\r\n      const [maxThresholdValueAX, setMaxThresholdValueAX] = React.useState<number>(0)\r\n\r\n      const [minThresholdValueAY, setMinThresholdValueAY] = React.useState<number>(0)\r\n      const [maxThresholdValueAY, setMaxThresholdValueAY] = React.useState<number>(0)\r\n\r\n      const [minThresholdValueAZ, setMinThresholdValueAZ] = React.useState<number>(0)\r\n      const [maxThresholdValueAZ, setMaxThresholdValueAZ] = React.useState<number>(0)\r\n      \r\n      \r\n      useEffect(() => {\r\n        createWebsocketConnection();\r\n        // initMap();\r\n      }, []);\r\n    \r\n      const createWebsocketConnection = (): void => {\r\n    \r\n        const beacon = 'wss://pmsekisqr4.execute-api.eu-central-1.amazonaws.com/dev';\r\n    \r\n        const socket = new WebSocket(beacon);\r\n        // sends payload to get connectionId\r\n        socket.onopen = () => {\r\n          let payload = {\r\n            action: '$connect',\r\n          };\r\n          socket.send(JSON.stringify(payload));\r\n          console.log('Connection established');\r\n        };\r\n    \r\n        // receives message from websocket (for connectionId)\r\n        let accelerometerBeaconData: any = socket.onmessage = (event: any) => {\r\n          if (!event) {\r\n            return;\r\n          }\r\n    \r\n          let data = JSON.parse(event.data);\r\n    \r\n          if (data.AccelerometerBeaconData) {\r\n            setData(data.AccelerometerBeaconData);\r\n            if (i >= 50) {\r\n              Ax.push(data.AccelerometerBeaconData.AccelerationInX);\r\n              setAX(Ax);\r\n              Ay.push(data.AccelerometerBeaconData.AccelerationInY);\r\n              setAY(Ay);\r\n              Az.push(data.AccelerometerBeaconData.AccelerationInZ);\r\n              setAZ(Az);\r\n            \r\n              coords.push({lat: data.AccelerometerBeaconData.Latitude, long: data.AccelerometerBeaconData.Longitude});\r\n              setCoords(coords);\r\n              console.log(coords);\r\n\r\n              Tim.push(data.AccelerometerBeaconData.Timestamp1);\r\n              setTime(Tim);\r\n\r\n              i = 0;\r\n            }\r\n            i++;\r\n          }\r\n        }\r\n        return accelerometerBeaconData\r\n      };\r\n\r\n      const initMap = () => {\r\n        if(coords != null){\r\n          var lat1 = coords[0].lat;\r\n          var long1 = coords[0].long;\r\n        };\r\n        \r\n      }\r\n      \r\n\r\n\r\n\r\n      // const initMap = () => {\r\n\r\n      //   const map = L.map('mapid').setView([coords[0].lat, coords[0].long], 13); \r\n      //   L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',maxZoom:20, id: 'mapbox/streets-v11'}).addTo(map);\r\n      //   var marker = L.circle([coords[0].lat, coords[0].long]).addTo(map);\r\n      //   L.circle([coords[0].lat, coords[0].long], {\r\n      //     color: 'red',\r\n      //     fillColor: '#f03',\r\n      //     fillOpacity: 0.5,\r\n      //     radius: 500\r\n      // }).addTo(map);\r\n      //   marker.bindPopup(\"<b>Beacon!</b><br>I am here.\").openPopup();       \r\n      // };\r\n      \r\n     \r\n      /*\r\n      useEffect(() => {\r\n\r\n        // add marker to map\r\n        for(const point of coords) {\r\n          if(!point) { continue; }\r\n\r\n          console.log('HERE point: ', point);\r\n          L.circle([point.lat, point.long]).addTo(map);\r\n          L.circle([point.lat, point.long], {\r\n            color: 'red',\r\n            fillColor: '#f03',\r\n            fillOpacity: 0.5,\r\n            radius: 500\r\n        }).addTo(map);\r\n\r\n        }\r\n        \r\n      }, [coords]);\r\n      */\r\n     \r\n\r\n      const setMinThresholdAX = (newMinValue: string) => {\r\n        if(typeof parseFloat(newMinValue) !== 'number') { return; }\r\n\r\n        setMinThresholdValueAX(parseFloat(newMinValue));\r\n      }\r\n\r\n      const setMaxThresholdAX = (newMaxValue: string) => {\r\n        if(typeof parseFloat(newMaxValue) !== 'number') { return; }\r\n\r\n        setMaxThresholdValueAX(parseFloat(newMaxValue));\r\n      }\r\n\r\n      const setMinThresholdAY = (newMinValue: string) => {\r\n        if(typeof parseFloat(newMinValue) !== 'number') { return; }\r\n\r\n        setMinThresholdValueAY(parseFloat(newMinValue));\r\n      }\r\n\r\n      const setMaxThresholdAY = (newMaxValue: string) => {\r\n        if(typeof parseFloat(newMaxValue) !== 'number') { return; }\r\n\r\n        setMaxThresholdValueAY(parseFloat(newMaxValue));\r\n      }\r\n\r\n      const setMinThresholdAZ = (newMinValue: string) => {\r\n        if(typeof parseFloat(newMinValue) !== 'number') { return; }\r\n\r\n        setMinThresholdValueAZ(parseFloat(newMinValue));\r\n      }\r\n\r\n      const setMaxThresholdAZ = (newMaxValue: string) => {\r\n        if(typeof parseFloat(newMaxValue) !== 'number') { return; }\r\n\r\n        setMaxThresholdValueAZ(parseFloat(newMaxValue));\r\n      }\r\n\r\n      const myIcon = new L.Icon({\r\n        iconUrl: marker,\r\n        iconRetinaUrl: marker,\r\n        popupAnchor:  [-0, -0],\r\n        iconSize: [32,45],     \r\n    });\r\n\r\n    //   const Red_MARKER = `data:image/svg+xml;utf8,${encodeURIComponent(`<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n    // <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"36.059\" height=\"36.059\" viewBox=\"0 0 36.059 36.059\" style=\"transform:rotate(${0}deg)\">\r\n    //   <defs>\r\n    //     <filter id=\"Path_10080\" x=\"0\" y=\"0\" width=\"36.059\" height=\"36.059\" filterUnits=\"userSpaceOnUse\">\r\n    //       <feOffset input=\"SourceAlpha\"/>\r\n    //       <feGaussianBlur stdDeviation=\"2.5\" result=\"blur\"/>\r\n    //       <feFlood flood-opacity=\"0.161\"/>\r\n    //       <feComposite operator=\"in\" in2=\"blur\"/>\r\n    //       <feComposite in=\"SourceGraphic\"/>\r\n    //     </filter>\r\n    //   </defs>\r\n    //   <g id=\"Group_8038\" data-name=\"Group 8038\" transform=\"translate(5719.5 1106.5)\">\r\n    //     <rect id=\"Rectangle_2670\" data-name=\"Rectangle 2670\" width=\"21\" height=\"21\" transform=\"translate(-5712 -1099)\" fill=\"none\"/>\r\n    //     <g transform=\"matrix(1, 0, 0, 1, -5719.5, -1106.5)\" filter=\"url(#Path_10080)\">\r\n    //       <path id=\"Path_10080-2\" data-name=\"Path 10080\" d=\"M15.4,12.766a6.414,6.414,0,0,0,1.781-5.634l-.446-2.55-2.55-.446A6.414,6.414,0,0,0,8.553,5.916L6.746,7.723c.234-.232-.845.866-.626.626l-2.96,2.96a2.644,2.644,0,0,0,0,3.735l3.114,3.114a2.644,2.644,0,0,0,3.735,0l2.96-2.96Z\" transform=\"translate(19.2 2.96) rotate(45)\" fill=\"${\"red\"}\"/>\r\n    //     </g>\r\n    //   </g>\r\n    // </svg>\r\n    // `)}`;\r\n\r\n    //   const BoatIcon = L.icon({\r\n    //     iconUrl: Red_MARKER,\r\n    //     iconSize: [40, 40],\r\n    //     iconAnchor: [12, 12],\r\n    //     popupAnchor: [0, 0],\r\n    // });\r\n\r\n    \r\n\r\n        const renderedMarkers = (\r\n          coords.map((position, index) => {\r\n            return (\r\n              <Marker key={`marker-${index}`} position={[position.lat, position.long]} icon={myIcon} > \r\n                <Popup>\r\n                  <span>A pretty CSS3 popup. <br/> Easily customizable.</span>\r\n                </Popup>\r\n              </Marker>\r\n              // <Circle key={`marker-${index}`} radius={500} center={[position.lat, position.long]}>\r\n              //   <Popup>\r\n              //     <span>A pretty CSS3 popup. <br/> Easily customizable.</span>\r\n              //   </Popup>\r\n              // </Circle>\r\n            )\r\n          })\r\n        )\r\n      \r\n\r\n    return (\r\n        <div>\r\n          <br/>\r\n          <Button style={{ background: '#4db8ff', padding:'15px'}} fullWidth variant=\"contained\" color=\"primary\" > Accelerometer Beacon </Button>\r\n          <h3>BeaconId: {data.BeaconId1}</h3>\r\n          <div className=\"row\">\r\n            <div className=\"column\">\r\n              <div className=\"speedometer-heading\">Acceleration in X </div>\r\n              <ReactSpeedometer textColor=\"white\" minValue={-10} maxValue={10} value={data.AccelerationInX} needleColor=\"red\" startColor=\"green\" segments={10} endColor=\"orange\" />\r\n            </div>\r\n            <div className=\"column\">\r\n            <div className=\"speedometer-heading\">Acceleration in Y</div>\r\n            <ReactSpeedometer textColor=\"white\" minValue={-10} maxValue={10} value={data.AccelerationInY} needleColor=\"red\" startColor=\"green\" segments={10} endColor=\"orange\" />\r\n            </div>\r\n            <div className=\"column\">\r\n            <div className=\"speedometer-heading\">Acceleration in Z</div>\r\n            <ReactSpeedometer textColor=\"white\" minValue={-10} maxValue={10} value={data.AccelerationInZ} needleColor=\"red\" startColor=\"green\" segments={10} endColor=\"orange\" />\r\n            </div>\r\n         </div>\r\n\r\n         <div>\r\n          <div className=\"speedometer-heading\">Acceleration in Z </div>\r\n          <div className=\"slider-heading\"> Select Threshold Limits </div>\r\n              <TextField id=\"minThresholdAZ\"  type = \"number\" label=\"Min\" variant=\"outlined\" value={minThresholdValueAZ}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMinThresholdAZ(e.target.value)}\r\n              />\r\n              <TextField id=\"maxThresholdAZ\"  type = \"number\" label=\"Max\" variant=\"outlined\" value={maxThresholdValueAZ}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMaxThresholdAZ(e.target.value)}\r\n              />\r\n              \r\n              <Line className=\"slider-heading\"\r\n            data={{\r\n              labels: time,\r\n              datasets: [{\r\n                label: '',\r\n                data: aZ,\r\n                fill: true,\r\n                borderColor: 'rgb(255, 255, 255)',\r\n                backgroundColor: 'rgb(72, 81, 86)',\r\n                showLine: true,\r\n                tension: 0.1\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Min',\r\n                data: [minThresholdValueAZ, minThresholdValueAZ, minThresholdValueAZ, minThresholdValueAZ, minThresholdValueAZ, minThresholdValueAZ, minThresholdValueAZ, minThresholdValueAZ],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Max',\r\n                data: [maxThresholdValueAZ, maxThresholdValueAZ, maxThresholdValueAZ, maxThresholdValueAZ, maxThresholdValueAZ, maxThresholdValueAZ, maxThresholdValueAZ, maxThresholdValueAZ],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              }\r\n              ],\r\n            }}\r\n            height={200}\r\n            width={600} type={'line'}/>\r\n            </div>\r\n        \r\n            <div>\r\n              <div className=\"speedometer-heading\">Acceleration in Y </div>\r\n              <div className=\"slider-heading\"> Select Threshold Limits </div>\r\n              <TextField id=\"minThresholdAY\"  type = \"number\" label=\"Min\" variant=\"outlined\" value={minThresholdValueAY}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMinThresholdAY(e.target.value)}\r\n              />\r\n              <TextField id=\"maxThresholdAY\"  type = \"number\" label=\"Max\" variant=\"outlined\" value={maxThresholdValueAY}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMaxThresholdAY(e.target.value)}\r\n              />\r\n              <Line className=\"slider-heading\" \r\n            data={{\r\n              labels: time,\r\n              datasets: [{\r\n                label: '',\r\n                data: aY,\r\n                fill: true,\r\n                borderColor: 'rgb(255, 255, 255)',\r\n                backgroundColor: 'rgb(241, 136, 0)',\r\n                showLine: true,\r\n                tension: 0.1\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Min',\r\n                data: [minThresholdValueAY, minThresholdValueAY, minThresholdValueAY, minThresholdValueAY, minThresholdValueAY, minThresholdValueAY, minThresholdValueAY, minThresholdValueAY],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Max',\r\n                data: [maxThresholdValueAY, maxThresholdValueAY, maxThresholdValueAY, maxThresholdValueAY, maxThresholdValueAY, maxThresholdValueAY, maxThresholdValueAY, maxThresholdValueAY],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              }\r\n              ],\r\n            }}\r\n            height={200}\r\n            width={600} type={'line'}              />\r\n            </div>\r\n\r\n         <div>\r\n          <div className=\"speedometer-heading\">Acceleration in X </div>\r\n          <div className=\"slider-heading\"> Select Threshold Limits </div>\r\n              <TextField id=\"minThresholdAX\"  type = \"number\" label=\"Min\" variant=\"outlined\" value={minThresholdValueAX}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMinThresholdAX(e.target.value)}\r\n              />\r\n              <TextField id=\"maxThresholdAX\"  type = \"number\" label=\"Max\" variant=\"outlined\" value={maxThresholdValueAX}\r\n                inputProps={{step: 0.1}} onChange={(e) => setMaxThresholdAX(e.target.value)}\r\n              />\r\n              <Line className=\"slider-heading\"\r\n            data={{\r\n              labels: time,\r\n              datasets: [{\r\n                label: '',\r\n                data: aX,\r\n                fill: true,\r\n                borderColor: 'rgb(255, 255, 255)',\r\n                backgroundColor: 'rgb(0, 135, 138)',\r\n                showLine: true,\r\n                tension: 0.1\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Min',\r\n                data: [minThresholdValueAX, minThresholdValueAX, minThresholdValueAX, minThresholdValueAX, minThresholdValueAX, minThresholdValueAX, minThresholdValueAX, minThresholdValueAX],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: 'Max',\r\n                data: [maxThresholdValueAX, maxThresholdValueAX, maxThresholdValueAX, maxThresholdValueAX, maxThresholdValueAX, maxThresholdValueAX, maxThresholdValueAX, maxThresholdValueAX],\r\n                backgroundColor: 'rgb(255,215,0)',\r\n              }\r\n              ],\r\n            }}\r\n            height={200}\r\n            width={600} type={'line'}              />\r\n          <div className=\"slider-heading\"> GPS Coordinates </div>\r\n          <div className=\"map-heading\">\r\n          <MapContainer center={[49.2142, 12.6582]} zoom={20} style={{ height: 750, width: 1780 }}> \r\n          <TileLayer \r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n          />\r\n          {renderedMarkers}\r\n  \r\n          </MapContainer>\r\n          </div>\r\n          <br/>\r\n        </div>   \r\n\r\n        <Button style={{ background: '#008ae6' }} variant=\"contained\" color=\"primary\" component={Link} to=\"/\"> Back </Button>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AccelerometerPage);","C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\components\\Footer\\Footer.tsx",[],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\pages\\demonstrator.tsx",[],"C:\\Users\\u24p65\\Projects\\BeaconApp\\src\\components\\contactForm\\contactForm.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\index.tsx",[],["185","186"],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\reportWebVitals.ts",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\App.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\application.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\components\\Footer\\Footer.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\components\\contactForm\\contactForm.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\config\\routes.ts",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\config\\logging.ts",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\home.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\aboutMe.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\skills.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\contact.tsx",["187"],"C:\\Users\\u24p65\\My_Projects\\Nimmala_Portfolio\\src\\pages\\projects.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\index.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\reportWebVitals.ts",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\App.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\application.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\components\\Footer\\Footer.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\components\\contactForm\\contactForm.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\config\\logging.ts",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\config\\routes.ts",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\skills.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\home.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\contact.tsx",["188"],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\aboutMe.tsx",[],"C:\\Users\\u24p65\\My_Projects\\Harishkumarnimmala.github.io\\src\\pages\\projects.tsx",[],{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":55,"column":14,"nodeType":"195","messageId":"196","endLine":55,"endColumn":17},{"ruleId":"193","severity":1,"message":"197","line":56,"column":14,"nodeType":"195","messageId":"196","endLine":56,"endColumn":18},{"ruleId":"198","severity":1,"message":"199","line":77,"column":10,"nodeType":"200","endLine":77,"endColumn":12,"suggestions":"201"},{"ruleId":"193","severity":1,"message":"202","line":8,"column":48,"nodeType":"195","messageId":"196","endLine":8,"endColumn":66},{"ruleId":"193","severity":1,"message":"203","line":8,"column":68,"nodeType":"195","messageId":"196","endLine":8,"endColumn":74},{"ruleId":"193","severity":1,"message":"204","line":8,"column":76,"nodeType":"195","messageId":"196","endLine":8,"endColumn":82},{"ruleId":"193","severity":1,"message":"205","line":12,"column":10,"nodeType":"195","messageId":"196","endLine":12,"endColumn":14},{"ruleId":"198","severity":1,"message":"199","line":75,"column":10,"nodeType":"200","endLine":75,"endColumn":12,"suggestions":"206"},{"ruleId":"193","severity":1,"message":"207","line":124,"column":13,"nodeType":"195","messageId":"196","endLine":124,"endColumn":20},{"ruleId":"193","severity":1,"message":"208","line":126,"column":15,"nodeType":"195","messageId":"196","endLine":126,"endColumn":19},{"ruleId":"193","severity":1,"message":"209","line":127,"column":15,"nodeType":"195","messageId":"196","endLine":127,"endColumn":20},{"ruleId":"189","replacedBy":"210"},{"ruleId":"191","replacedBy":"211"},{"ruleId":"193","severity":1,"message":"212","line":5,"column":8,"nodeType":"195","messageId":"196","endLine":5,"endColumn":17},{"ruleId":"193","severity":1,"message":"212","line":5,"column":8,"nodeType":"195","messageId":"196","endLine":5,"endColumn":17},"no-native-reassign",["213"],"no-negated-in-lhs",["214"],"@typescript-eslint/no-unused-vars","'lat' is assigned a value but never used.","Identifier","unusedVar","'long' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createWebsocketConnection'. Either include it or remove the dependency array.","ArrayExpression",["215"],"'AttributionControl' is defined but never used.","'useMap' is defined but never used.","'Circle' is defined but never used.","'Icon' is defined but never used.",["216"],"'initMap' is assigned a value but never used.","'lat1' is assigned a value but never used.","'long1' is assigned a value but never used.",["213"],["214"],"'EmailIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"217","fix":"219"},"Update the dependencies array to be: [createWebsocketConnection]",{"range":"220","text":"221"},{"range":"222","text":"221"},[2496,2498],"[createWebsocketConnection]",[2477,2479]]